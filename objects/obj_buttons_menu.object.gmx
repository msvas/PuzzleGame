<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
    We will be using the following functions:
        point_in_rectangle(px,py,x1,y1,x2,y2) This function will check if pointx and pointy are inside the given area.
        window_mouse_get_x() This function will get the x value of the mouse relative to the position in the window, rather than the room.
        window_mouse_get_y() This function, like window_mouse_get_x(), will get the y value of the mouse relative to the position in the window, rather than the room.
        
        The other functions are all basic functions that most of you have heard of &amp; used many times so I will just explain them within the code.

*/


//First button!
/*
if (point_in_rectangle(window_mouse_get_x(), window_mouse_get_y(), 10,10,300,60) &amp;&amp; hovering = 0) //Here we are checking if the mouse's position in the window is the same as the boundaries for our button &amp; if we are not hovering over any buttons
{
    draw_set_alpha(0.8); //If the mouse is in the the area of our button then we set the opacity to 0.8
    hovering = 1; //Set the hovering to 1 since we are hovering over the first button
};
else //If the mouse is not inside the point
{
    draw_set_alpha(0.5); //Set the alpha back to normal
};

draw_set_color(c_gray); //Set the color to gray for our button
draw_rectangle(10, 10, 300, 60,false); //Draw our button
draw_set_color(c_black); //Set the color to black for our text
draw_set_halign(fa_center); //Center our text (horizontal)
draw_set_valign(fa_center); //Center our text (verticle)
draw_text(155,35,"Button 1!"); //Draw our button text


//Second button!
if point_in_rectangle(window_mouse_get_x(), window_mouse_get_y(), 10, 100, 300, 150) //Here we are checking if the mouse's position in the window is the same as the boundaries for our button
{
    draw_set_alpha(0.8); //If the mouse is in the the area of our button then we set the opacity to 0.8
    hovering = 2; //Set the hovering to 2 since we are hovering over the second button
};
else //If the mouse is not inside the point
{
    draw_set_alpha(0.5); //Set the alpha back to normal
};

draw_set_color(c_gray); //Set the color to gray for our button
draw_rectangle(10, 100, 300, 150, false); //Draw our button
draw_set_color(c_black); //Set the color to black for our text
draw_set_halign(fa_center); //Center our text (horizontal)
draw_set_valign(fa_center); //Center our text (verticle)
draw_text(155,125,"Button 2!"); //Draw our button text


//Now we clean up our drawing
draw_set_alpha(1); //Reset the alpha
draw_set_color(c_white); //Reset the color
draw_set_halign(fa_left); //Reset the horizontal align

//We check if the mouse has been pressed on any of the buttons
if mouse_check_button_pressed(mb_left) &amp;&amp; hovering &gt; 0 //If the mouse button is pressed &amp; we are hovering over a button
{
    switch hovering //We use a switch statement here instead of a huge list of "if" statements. The switch statement just chooses the appropriate option based on the value of the variable, in our case, "hovering".
    {
        case 1: 
            room_goto(level1);
            break; //If hovering = 1 then we show the message. Don't forget to have your break after a case otherwise the case can never change and it will be an infinite loop!
        case 2: {show_message("Menu!")} break; //If hovering = 2
    };
};

//Lastly we set hovering back to 0
hovering = 0;
*/
if(Button(60, 230, 260, 280, "Start Game")) {
    room_goto(levelMenu);
}
Button(60, 300, 260, 350, "How To Play");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
