<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>anim_character1_idle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moving = false;
moveUp = false;
moveDown = false;
moveLeft = false;
moveRight = false;

canMoveUp = true;
canMoveDown = true;
canMoveRight = true;
canMoveLeft = true;

rightCol = false;
downCol = false;
leftCol = false;
upCol = false;

hasKey = false;

moveSpeed = 4;

target_x = x;
target_y = y;

tileSize = 32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>halfTile = tileSize/2 + 1;

if(global.started) {
    if(position_meeting(x + halfTile, y, obj_trap)) {
        hole = instance_nearest(x + halfTile, y, obj_trap);
        if(!hole.walkable)
            canMoveRight = false;
    }
    if(position_meeting(x - halfTile, y, obj_trap)) {
        hole = instance_nearest(x - halfTile, y, obj_trap);
        if(!hole.walkable)
            canMoveLeft = false;
    }
    if(position_meeting(x, y + halfTile, obj_trap)) {
        hole = instance_nearest(x, y + halfTile, obj_trap);
        if(!hole.walkable)
            canMoveDown = false;
    }
    if(position_meeting(x, y - halfTile, obj_trap)) {
        hole = instance_nearest(x, y - halfTile, obj_trap);
        if(!hole.walkable)
            canMoveUp = false;
    }
    
    if(x != target_x || y != target_y) {
        if(target_x == x) {
            angle = point_direction(x, y, target_x, target_y);
            walkDist = lengthdir_y(moveSpeed, angle);
            if(walkDist &gt; 0 &amp;&amp; canMoveDown) {
                sprite_index = anim_character1_walking_down;
                moveDown = true;
                moving = true;
                y += round(walkDist);
            }
            else if (walkDist &lt; 0 &amp;&amp; canMoveUp) {
                sprite_index = anim_character1_walking_up;
                moveUp = true;
                moving = true;
                y += round(walkDist);
            }
            else {
                target_x = x;
                target_y = y;
            }
        }
        else if (target_y == y) {
            angle = point_direction(x, y, target_x, target_y);
            walkDist = lengthdir_x(moveSpeed, angle);
            if(walkDist &gt; 0 &amp;&amp; canMoveRight) {
                sprite_index = anim_character1_walking_right;
                moveRight = true;
                moving = true;
                x += round(walkDist);
            }
            else if (walkDist &lt; 0 &amp;&amp; canMoveLeft) {
                sprite_index = anim_character1_walking_left;
                moveLeft = true;
                moving = true;
                x += round(walkDist);
            }
            else {
                target_x = x;
                target_y = y;
            }
        }
        else {
            target_x = x;
            target_y = y;
        }
    }
    else {
        moving = false;
        moveUp = false;
        moveDown = false;
        moveLeft = false;
        moveRight = false;
        sprite_index = anim_character1_idle;
        //show_debug_message(string(x) + " " + string(target_x));
    }
    
    if !place_meeting(x + 1, y, obj_rock1) {
        canMoveUp = true;
        canMoveDown = true;
        canMoveRight = true;
        canMoveLeft = true; 
    }
}
else {
    sprite_index = anim_character1_idle;
}
//show_debug_message(string(canMoveUp) + string(canMoveDown) + string(canMoveLeft) + string(canMoveRight));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(moving) {
    moving = false;
    target_x = x;
    target_y = y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_key1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hasKey = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_chest1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(moving) {
    moving = false;
    target_x = x;
    target_y = y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_rock1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.rightCol &amp;&amp; (other.x &gt; x)) {
    canMoveRight = false;
}
if(other.leftCol &amp;&amp; (other.x &lt; x)) {
    canMoveLeft = false;
}
if(other.upCol &amp;&amp; (other.y &lt; y)) {
    canMoveUp = false;
}
if(other.downCol &amp;&amp; (other.y &gt; y)) {
    canMoveDown = false;
}
if(!other.rightCol &amp;&amp; (other.x &gt; x)) {
    canMoveRight = true;
}
if(!other.leftCol &amp;&amp; (other.x &lt; x)) {
    canMoveLeft = true;
}
if(!other.upCol &amp;&amp; (other.y &lt; y)) {
    canMoveUp = true;
}
if(!other.downCol &amp;&amp; (other.y &gt; y)) {
    canMoveDown = true;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (device_mouse_check_button_pressed(0, mb_left) &amp;&amp; !moving) {
    click_x = device_mouse_x(0);
    click_y = device_mouse_y(0);
    
    floorId = instance_nearest(click_x, click_y, obj_floor);
    target_x = floorId.x;
    target_y = floorId.y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
