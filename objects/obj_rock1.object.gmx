<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_rock1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rightCol = false;
downCol = false;
leftCol = false;
upCol = false;

tileSize = 32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>halfTile = tileSize/2 + 1;
if(position_meeting(x + halfTile, y, obj_solid) 
    || position_meeting(x + halfTile, y, obj_rock1) 
    || position_meeting(x + halfTile, y, obj_rock_solid) 
    || position_meeting(x + halfTile, y, obj_key1)) {
    rightCol = true;
}
if(position_meeting(x - halfTile, y, obj_solid) 
    || position_meeting(x - halfTile, y, obj_rock1) 
    || position_meeting(x - halfTile, y, obj_rock_solid)
    || position_meeting(x - halfTile, y, obj_key1)) {
    leftCol = true;
}
if(position_meeting(x, y + halfTile, obj_solid) 
    || position_meeting(x, y + halfTile, obj_rock1)
    || position_meeting(x, y + halfTile, obj_rock_solid) 
    || position_meeting(x, y + halfTile, obj_key1)) {
    downCol = true;
}
if(position_meeting(x, y - halfTile, obj_solid) 
    || position_meeting(x, y - halfTile, obj_rock1) 
    || position_meeting(x, y - halfTile, obj_rock_solid) 
    || position_meeting(x, y - halfTile, obj_key1)) {
    upCol = true;
}
if(!position_meeting(x + halfTile, y, obj_solid) 
    &amp;&amp; !position_meeting(x + halfTile, y, obj_rock1) 
    &amp;&amp; !position_meeting(x + halfTile, y, obj_rock_solid) 
    &amp;&amp; !position_meeting(x + halfTile, y, obj_spike) 
    &amp;&amp; !position_meeting(x + halfTile, y, obj_key1)) {
    rightCol = false;
}
if(!position_meeting(x - halfTile, y, obj_solid) 
    &amp;&amp; !position_meeting(x - halfTile, y, obj_rock1) 
    &amp;&amp; !position_meeting(x - halfTile, y, obj_rock_solid)
    &amp;&amp; !position_meeting(x - halfTile, y, obj_spike) 
    &amp;&amp; !position_meeting(x - halfTile, y, obj_key1)) {
    leftCol = false;
}
if(!position_meeting(x, y + halfTile, obj_solid) 
    &amp;&amp; !position_meeting(x, y + halfTile, obj_rock1) 
    &amp;&amp; !position_meeting(x, y + halfTile, obj_rock_solid)
    &amp;&amp; !position_meeting(x, y + halfTile, obj_spike) 
    &amp;&amp; !position_meeting(x, y + halfTile, obj_key1)) {
    downCol = false;
}
if(!position_meeting(x, y - halfTile, obj_solid)
    &amp;&amp; !position_meeting(x, y - halfTile, obj_rock1) 
    &amp;&amp; !position_meeting(x, y - halfTile, obj_rock_solid)
    &amp;&amp; !position_meeting(x, y - halfTile, obj_spike) 
    &amp;&amp; !position_meeting(x, y - halfTile, obj_key1)) {
    upCol = false;
}

if(position_meeting(x + halfTile, y, obj_spike)) {
    spike = instance_nearest(x + halfTile, y, obj_spike);
    if(!spike.walkable)
        rightCol = true;
    else if (!position_meeting(x + halfTile, y, obj_solid) &amp;&amp; !position_meeting(x + halfTile, y, obj_rock1))
        rightCol = false;
}
if(position_meeting(x - halfTile, y, obj_spike)) {
    spike = instance_nearest(x - halfTile, y, obj_spike);
    if(!spike.walkable)
        leftCol = true;
    else if (!position_meeting(x - halfTile, y, obj_solid) &amp;&amp; !position_meeting(x - halfTile, y, obj_rock1))
        leftCol = false;
}
if(position_meeting(x, y + halfTile, obj_spike)) {
    spike = instance_nearest(x, y + halfTile, obj_spike);
    if(!spike.walkable)
        downCol = true;
    else if (!position_meeting(x, y + halfTile, obj_solid) &amp;&amp; !position_meeting(x, y + halfTile, obj_rock1))
        downCol = false;
}
if(position_meeting(x, y - halfTile, obj_spike)) {
    spike = instance_nearest(x, y - halfTile, obj_spike);
    if(!spike.walkable)
        upCol = true;
    else if (!position_meeting(x, y - halfTile, obj_solid) &amp;&amp; !position_meeting(x, y - halfTile, obj_rock1))
        upCol = false;
}
//show_debug_message("up " + string(upCol) + " down " + string(downCol) + " right " + string(rightCol) + " left " + string(leftCol));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_character1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.moveRight &amp;&amp; !rightCol) {
    x += tileSize;
}
else if(other.moveLeft &amp;&amp; !leftCol) {
    x -= tileSize;
}
else if(other.moveUp &amp;&amp; !upCol) {
    y -= tileSize;
}
else if(other.moveDown &amp;&amp; !downCol) {
    //show_debug_message(string(y-(other.y)));
    y += tileSize;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hole1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!obj_character1.moving &amp;&amp; !other.walkable) {
    instance_destroy();
    other.walkable = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
